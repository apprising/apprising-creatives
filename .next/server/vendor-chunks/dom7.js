"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dom7";
exports.ids = ["vendor-chunks/dom7"];
exports.modules = {

/***/ "(ssr)/./node_modules/dom7/dom7.esm.js":
/*!***************************************!*\
  !*** ./node_modules/dom7/dom7.esm.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ $),\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   addClass: () => (/* binding */ addClass),\n/* harmony export */   animate: () => (/* binding */ animate),\n/* harmony export */   animationEnd: () => (/* binding */ animationEnd),\n/* harmony export */   append: () => (/* binding */ append),\n/* harmony export */   appendTo: () => (/* binding */ appendTo),\n/* harmony export */   attr: () => (/* binding */ attr),\n/* harmony export */   blur: () => (/* binding */ blur),\n/* harmony export */   change: () => (/* binding */ change),\n/* harmony export */   children: () => (/* binding */ children),\n/* harmony export */   click: () => (/* binding */ click),\n/* harmony export */   closest: () => (/* binding */ closest),\n/* harmony export */   css: () => (/* binding */ css),\n/* harmony export */   data: () => (/* binding */ data),\n/* harmony export */   dataset: () => (/* binding */ dataset),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   detach: () => (/* binding */ detach),\n/* harmony export */   each: () => (/* binding */ each),\n/* harmony export */   empty: () => (/* binding */ empty),\n/* harmony export */   eq: () => (/* binding */ eq),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   find: () => (/* binding */ find),\n/* harmony export */   focus: () => (/* binding */ focus),\n/* harmony export */   focusin: () => (/* binding */ focusin),\n/* harmony export */   focusout: () => (/* binding */ focusout),\n/* harmony export */   hasClass: () => (/* binding */ hasClass),\n/* harmony export */   height: () => (/* binding */ height),\n/* harmony export */   hide: () => (/* binding */ hide),\n/* harmony export */   html: () => (/* binding */ html),\n/* harmony export */   index: () => (/* binding */ index),\n/* harmony export */   insertAfter: () => (/* binding */ insertAfter),\n/* harmony export */   insertBefore: () => (/* binding */ insertBefore),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   keydown: () => (/* binding */ keydown),\n/* harmony export */   keypress: () => (/* binding */ keypress),\n/* harmony export */   keyup: () => (/* binding */ keyup),\n/* harmony export */   mousedown: () => (/* binding */ mousedown),\n/* harmony export */   mouseenter: () => (/* binding */ mouseenter),\n/* harmony export */   mouseleave: () => (/* binding */ mouseleave),\n/* harmony export */   mousemove: () => (/* binding */ mousemove),\n/* harmony export */   mouseout: () => (/* binding */ mouseout),\n/* harmony export */   mouseover: () => (/* binding */ mouseover),\n/* harmony export */   mouseup: () => (/* binding */ mouseup),\n/* harmony export */   next: () => (/* binding */ next),\n/* harmony export */   nextAll: () => (/* binding */ nextAll),\n/* harmony export */   off: () => (/* binding */ off),\n/* harmony export */   offset: () => (/* binding */ offset),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   once: () => (/* binding */ once),\n/* harmony export */   outerHeight: () => (/* binding */ outerHeight),\n/* harmony export */   outerWidth: () => (/* binding */ outerWidth),\n/* harmony export */   parent: () => (/* binding */ parent),\n/* harmony export */   parents: () => (/* binding */ parents),\n/* harmony export */   prepend: () => (/* binding */ prepend),\n/* harmony export */   prependTo: () => (/* binding */ prependTo),\n/* harmony export */   prev: () => (/* binding */ prev),\n/* harmony export */   prevAll: () => (/* binding */ prevAll),\n/* harmony export */   prop: () => (/* binding */ prop),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   removeAttr: () => (/* binding */ removeAttr),\n/* harmony export */   removeClass: () => (/* binding */ removeClass),\n/* harmony export */   removeData: () => (/* binding */ removeData),\n/* harmony export */   resize: () => (/* binding */ resize),\n/* harmony export */   scroll: () => (/* binding */ scroll),\n/* harmony export */   scrollLeft: () => (/* binding */ scrollLeft),\n/* harmony export */   scrollTo: () => (/* binding */ scrollTo),\n/* harmony export */   scrollTop: () => (/* binding */ scrollTop),\n/* harmony export */   show: () => (/* binding */ show),\n/* harmony export */   siblings: () => (/* binding */ siblings),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   styles: () => (/* binding */ styles),\n/* harmony export */   submit: () => (/* binding */ submit),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   toggleClass: () => (/* binding */ toggleClass),\n/* harmony export */   touchend: () => (/* binding */ touchend),\n/* harmony export */   touchmove: () => (/* binding */ touchmove),\n/* harmony export */   touchstart: () => (/* binding */ touchstart),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transition: () => (/* binding */ transition),\n/* harmony export */   transitionEnd: () => (/* binding */ transitionEnd),\n/* harmony export */   transitionStart: () => (/* binding */ transitionStart),\n/* harmony export */   trigger: () => (/* binding */ trigger),\n/* harmony export */   val: () => (/* binding */ val),\n/* harmony export */   value: () => (/* binding */ value),\n/* harmony export */   width: () => (/* binding */ width)\n/* harmony export */ });\n/* harmony import */ var ssr_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ssr-window */ \"(ssr)/./node_modules/ssr-window/ssr-window.esm.js\");\n/**\n * Dom7 4.0.6\n * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API\n * https://framework7.io/docs/dom7.html\n *\n * Copyright 2023, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: February 2, 2023\n */\n\n\n/* eslint-disable no-proto */\nfunction makeReactive(obj) {\n  const proto = obj.__proto__;\n  Object.defineProperty(obj, '__proto__', {\n    get() {\n      return proto;\n    },\n    set(value) {\n      proto.__proto__ = value;\n    }\n  });\n}\nclass Dom7 extends Array {\n  constructor(items) {\n    if (typeof items === 'number') {\n      super(items);\n    } else {\n      super(...(items || []));\n      makeReactive(this);\n    }\n  }\n}\nfunction arrayFlat(arr = []) {\n  const res = [];\n  arr.forEach(el => {\n    if (Array.isArray(el)) {\n      res.push(...arrayFlat(el));\n    } else {\n      res.push(el);\n    }\n  });\n  return res;\n}\nfunction arrayFilter(arr, callback) {\n  return Array.prototype.filter.call(arr, callback);\n}\nfunction arrayUnique(arr) {\n  const uniqueArray = [];\n  for (let i = 0; i < arr.length; i += 1) {\n    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);\n  }\n  return uniqueArray;\n}\nfunction toCamelCase(string) {\n  return string.toLowerCase().replace(/-(.)/g, (match, group) => group.toUpperCase());\n}\n\n// eslint-disable-next-line\n\nfunction qsa(selector, context) {\n  if (typeof selector !== 'string') {\n    return [selector];\n  }\n  const a = [];\n  const res = context.querySelectorAll(selector);\n  for (let i = 0; i < res.length; i += 1) {\n    a.push(res[i]);\n  }\n  return a;\n}\nfunction $(selector, context) {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n  let arr = [];\n  if (!context && selector instanceof Dom7) {\n    return selector;\n  }\n  if (!selector) {\n    return new Dom7(arr);\n  }\n  if (typeof selector === 'string') {\n    const html = selector.trim();\n    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n      let toCreate = 'div';\n      if (html.indexOf('<li') === 0) toCreate = 'ul';\n      if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n      if (html.indexOf('<tbody') === 0) toCreate = 'table';\n      if (html.indexOf('<option') === 0) toCreate = 'select';\n      const tempParent = document.createElement(toCreate);\n      tempParent.innerHTML = html;\n      for (let i = 0; i < tempParent.childNodes.length; i += 1) {\n        arr.push(tempParent.childNodes[i]);\n      }\n    } else {\n      arr = qsa(selector.trim(), context || document);\n    } // arr = qsa(selector, document);\n  } else if (selector.nodeType || selector === window || selector === document) {\n    arr.push(selector);\n  } else if (Array.isArray(selector)) {\n    if (selector instanceof Dom7) return selector;\n    arr = selector;\n  }\n  return new Dom7(arrayUnique(arr));\n}\n$.fn = Dom7.prototype;\n\n// eslint-disable-next-line\n\nfunction addClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.add(...classNames);\n  });\n  return this;\n}\nfunction removeClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    el.classList.remove(...classNames);\n  });\n  return this;\n}\nfunction toggleClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  this.forEach(el => {\n    classNames.forEach(className => {\n      el.classList.toggle(className);\n    });\n  });\n}\nfunction hasClass(...classes) {\n  const classNames = arrayFlat(classes.map(c => c.split(' ')));\n  return arrayFilter(this, el => {\n    return classNames.filter(className => el.classList.contains(className)).length > 0;\n  }).length > 0;\n}\nfunction attr(attrs, value) {\n  if (arguments.length === 1 && typeof attrs === 'string') {\n    // Get attr\n    if (this[0]) return this[0].getAttribute(attrs);\n    return undefined;\n  } // Set attrs\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (arguments.length === 2) {\n      // String\n      this[i].setAttribute(attrs, value);\n    } else {\n      // Object\n      for (const attrName in attrs) {\n        this[i][attrName] = attrs[attrName];\n        this[i].setAttribute(attrName, attrs[attrName]);\n      }\n    }\n  }\n  return this;\n}\nfunction removeAttr(attr) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].removeAttribute(attr);\n  }\n  return this;\n}\nfunction prop(props, value) {\n  if (arguments.length === 1 && typeof props === 'string') {\n    // Get prop\n    if (this[0]) return this[0][props];\n  } else {\n    // Set props\n    for (let i = 0; i < this.length; i += 1) {\n      if (arguments.length === 2) {\n        // String\n        this[i][props] = value;\n      } else {\n        // Object\n        for (const propName in props) {\n          this[i][propName] = props[propName];\n        }\n      }\n    }\n    return this;\n  }\n  return this;\n}\nfunction data(key, value) {\n  let el;\n  if (typeof value === 'undefined') {\n    el = this[0];\n    if (!el) return undefined; // Get value\n\n    if (el.dom7ElementDataStorage && key in el.dom7ElementDataStorage) {\n      return el.dom7ElementDataStorage[key];\n    }\n    const dataKey = el.getAttribute(`data-${key}`);\n    if (dataKey) {\n      return dataKey;\n    }\n    return undefined;\n  } // Set value\n\n  for (let i = 0; i < this.length; i += 1) {\n    el = this[i];\n    if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n    el.dom7ElementDataStorage[key] = value;\n  }\n  return this;\n}\nfunction removeData(key) {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (el.dom7ElementDataStorage && el.dom7ElementDataStorage[key]) {\n      el.dom7ElementDataStorage[key] = null;\n      delete el.dom7ElementDataStorage[key];\n    }\n  }\n}\nfunction dataset() {\n  const el = this[0];\n  if (!el) return undefined;\n  const dataset = {}; // eslint-disable-line\n\n  if (el.dataset) {\n    for (const dataKey in el.dataset) {\n      dataset[dataKey] = el.dataset[dataKey];\n    }\n  } else {\n    for (let i = 0; i < el.attributes.length; i += 1) {\n      const attr = el.attributes[i];\n      if (attr.name.indexOf('data-') >= 0) {\n        dataset[toCamelCase(attr.name.split('data-')[1])] = attr.value;\n      }\n    }\n  }\n  for (const key in dataset) {\n    if (dataset[key] === 'false') dataset[key] = false;else if (dataset[key] === 'true') dataset[key] = true;else if (parseFloat(dataset[key]) === dataset[key] * 1) dataset[key] *= 1;\n  }\n  return dataset;\n}\nfunction val(value) {\n  if (typeof value === 'undefined') {\n    // get value\n    const el = this[0];\n    if (!el) return undefined;\n    if (el.multiple && el.nodeName.toLowerCase() === 'select') {\n      const values = [];\n      for (let i = 0; i < el.selectedOptions.length; i += 1) {\n        values.push(el.selectedOptions[i].value);\n      }\n      return values;\n    }\n    return el.value;\n  } // set value\n\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (Array.isArray(value) && el.multiple && el.nodeName.toLowerCase() === 'select') {\n      for (let j = 0; j < el.options.length; j += 1) {\n        el.options[j].selected = value.indexOf(el.options[j].value) >= 0;\n      }\n    } else {\n      el.value = value;\n    }\n  }\n  return this;\n}\nfunction value(value) {\n  return this.val(value);\n}\nfunction transform(transform) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transform = transform;\n  }\n  return this;\n}\nfunction transition(duration) {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.transitionDuration = typeof duration !== 'string' ? `${duration}ms` : duration;\n  }\n  return this;\n}\nfunction on(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n  if (!capture) capture = false;\n  function handleLiveEvent(e) {\n    const target = e.target;\n    if (!target) return;\n    const eventData = e.target.dom7EventData || [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    if ($(target).is(targetSelector)) listener.apply(target, eventData);else {\n      const parents = $(target).parents(); // eslint-disable-line\n\n      for (let k = 0; k < parents.length; k += 1) {\n        if ($(parents[k]).is(targetSelector)) listener.apply(parents[k], eventData);\n      }\n    }\n  }\n  function handleEvent(e) {\n    const eventData = e && e.target ? e.target.dom7EventData || [] : [];\n    if (eventData.indexOf(e) < 0) {\n      eventData.unshift(e);\n    }\n    listener.apply(this, eventData);\n  }\n  const events = eventType.split(' ');\n  let j;\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (!targetSelector) {\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7Listeners) el.dom7Listeners = {};\n        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];\n        el.dom7Listeners[event].push({\n          listener,\n          proxyListener: handleEvent\n        });\n        el.addEventListener(event, handleEvent, capture);\n      }\n    } else {\n      // Live events\n      for (j = 0; j < events.length; j += 1) {\n        const event = events[j];\n        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};\n        if (!el.dom7LiveListeners[event]) el.dom7LiveListeners[event] = [];\n        el.dom7LiveListeners[event].push({\n          listener,\n          proxyListener: handleLiveEvent\n        });\n        el.addEventListener(event, handleLiveEvent, capture);\n      }\n    }\n  }\n  return this;\n}\nfunction off(...args) {\n  let [eventType, targetSelector, listener, capture] = args;\n  if (typeof args[1] === 'function') {\n    [eventType, listener, capture] = args;\n    targetSelector = undefined;\n  }\n  if (!capture) capture = false;\n  const events = eventType.split(' ');\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      let handlers;\n      if (!targetSelector && el.dom7Listeners) {\n        handlers = el.dom7Listeners[event];\n      } else if (targetSelector && el.dom7LiveListeners) {\n        handlers = el.dom7LiveListeners[event];\n      }\n      if (handlers && handlers.length) {\n        for (let k = handlers.length - 1; k >= 0; k -= 1) {\n          const handler = handlers[k];\n          if (listener && handler.listener === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          } else if (!listener) {\n            el.removeEventListener(event, handler.proxyListener, capture);\n            handlers.splice(k, 1);\n          }\n        }\n      }\n    }\n  }\n  return this;\n}\nfunction once(...args) {\n  const dom = this;\n  let [eventName, targetSelector, listener, capture] = args;\n  if (typeof args[1] === 'function') {\n    [eventName, listener, capture] = args;\n    targetSelector = undefined;\n  }\n  function onceHandler(...eventArgs) {\n    listener.apply(this, eventArgs);\n    dom.off(eventName, targetSelector, onceHandler, capture);\n    if (onceHandler.dom7proxy) {\n      delete onceHandler.dom7proxy;\n    }\n  }\n  onceHandler.dom7proxy = listener;\n  return dom.on(eventName, targetSelector, onceHandler, capture);\n}\nfunction trigger(...args) {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  const events = args[0].split(' ');\n  const eventData = args[1];\n  for (let i = 0; i < events.length; i += 1) {\n    const event = events[i];\n    for (let j = 0; j < this.length; j += 1) {\n      const el = this[j];\n      if (window.CustomEvent) {\n        const evt = new window.CustomEvent(event, {\n          detail: eventData,\n          bubbles: true,\n          cancelable: true\n        });\n        el.dom7EventData = args.filter((data, dataIndex) => dataIndex > 0);\n        el.dispatchEvent(evt);\n        el.dom7EventData = [];\n        delete el.dom7EventData;\n      }\n    }\n  }\n  return this;\n}\nfunction transitionStart(callback) {\n  const dom = this;\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('transitionstart', fireCallBack);\n  }\n  if (callback) {\n    dom.on('transitionstart', fireCallBack);\n  }\n  return this;\n}\nfunction transitionEnd(callback) {\n  const dom = this;\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('transitionend', fireCallBack);\n  }\n  if (callback) {\n    dom.on('transitionend', fireCallBack);\n  }\n  return this;\n}\nfunction animationEnd(callback) {\n  const dom = this;\n  function fireCallBack(e) {\n    if (e.target !== this) return;\n    callback.call(this, e);\n    dom.off('animationend', fireCallBack);\n  }\n  if (callback) {\n    dom.on('animationend', fireCallBack);\n  }\n  return this;\n}\nfunction width() {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  if (this[0] === window) {\n    return window.innerWidth;\n  }\n  if (this.length > 0) {\n    return parseFloat(this.css('width'));\n  }\n  return null;\n}\nfunction outerWidth(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetWidth + parseFloat(styles.getPropertyValue('margin-right')) + parseFloat(styles.getPropertyValue('margin-left'));\n    }\n    return this[0].offsetWidth;\n  }\n  return null;\n}\nfunction height() {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  if (this[0] === window) {\n    return window.innerHeight;\n  }\n  if (this.length > 0) {\n    return parseFloat(this.css('height'));\n  }\n  return null;\n}\nfunction outerHeight(includeMargins) {\n  if (this.length > 0) {\n    if (includeMargins) {\n      const styles = this.styles();\n      return this[0].offsetHeight + parseFloat(styles.getPropertyValue('margin-top')) + parseFloat(styles.getPropertyValue('margin-bottom'));\n    }\n    return this[0].offsetHeight;\n  }\n  return null;\n}\nfunction offset() {\n  if (this.length > 0) {\n    const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n    const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n    const el = this[0];\n    const box = el.getBoundingClientRect();\n    const body = document.body;\n    const clientTop = el.clientTop || body.clientTop || 0;\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\n    const scrollTop = el === window ? window.scrollY : el.scrollTop;\n    const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n    return {\n      top: box.top + scrollTop - clientTop,\n      left: box.left + scrollLeft - clientLeft\n    };\n  }\n  return null;\n}\nfunction hide() {\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].style.display = 'none';\n  }\n  return this;\n}\nfunction show() {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (el.style.display === 'none') {\n      el.style.display = '';\n    }\n    if (window.getComputedStyle(el, null).getPropertyValue('display') === 'none') {\n      // Still not visible\n      el.style.display = 'block';\n    }\n  }\n  return this;\n}\nfunction styles() {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  if (this[0]) return window.getComputedStyle(this[0], null);\n  return {};\n}\nfunction css(props, value) {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  let i;\n  if (arguments.length === 1) {\n    if (typeof props === 'string') {\n      // .css('width')\n      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n    } else {\n      // .css({ width: '100px' })\n      for (i = 0; i < this.length; i += 1) {\n        for (const prop in props) {\n          this[i].style[prop] = props[prop];\n        }\n      }\n      return this;\n    }\n  }\n  if (arguments.length === 2 && typeof props === 'string') {\n    // .css('width', '100px')\n    for (i = 0; i < this.length; i += 1) {\n      this[i].style[props] = value;\n    }\n    return this;\n  }\n  return this;\n}\nfunction each(callback) {\n  if (!callback) return this;\n  this.forEach((el, index) => {\n    callback.apply(el, [el, index]);\n  });\n  return this;\n}\nfunction filter(callback) {\n  const result = arrayFilter(this, callback);\n  return $(result);\n}\nfunction html(html) {\n  if (typeof html === 'undefined') {\n    return this[0] ? this[0].innerHTML : null;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].innerHTML = html;\n  }\n  return this;\n}\nfunction text(text) {\n  if (typeof text === 'undefined') {\n    return this[0] ? this[0].textContent.trim() : null;\n  }\n  for (let i = 0; i < this.length; i += 1) {\n    this[i].textContent = text;\n  }\n  return this;\n}\nfunction is(selector) {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n  const el = this[0];\n  let compareWith;\n  let i;\n  if (!el || typeof selector === 'undefined') return false;\n  if (typeof selector === 'string') {\n    if (el.matches) return el.matches(selector);\n    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);\n    if (el.msMatchesSelector) return el.msMatchesSelector(selector);\n    compareWith = $(selector);\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n    return false;\n  }\n  if (selector === document) {\n    return el === document;\n  }\n  if (selector === window) {\n    return el === window;\n  }\n  if (selector.nodeType || selector instanceof Dom7) {\n    compareWith = selector.nodeType ? [selector] : selector;\n    for (i = 0; i < compareWith.length; i += 1) {\n      if (compareWith[i] === el) return true;\n    }\n    return false;\n  }\n  return false;\n}\nfunction index() {\n  let child = this[0];\n  let i;\n  if (child) {\n    i = 0; // eslint-disable-next-line\n\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n    return i;\n  }\n  return undefined;\n}\nfunction eq(index) {\n  if (typeof index === 'undefined') return this;\n  const length = this.length;\n  if (index > length - 1) {\n    return $([]);\n  }\n  if (index < 0) {\n    const returnIndex = length + index;\n    if (returnIndex < 0) return $([]);\n    return $([this[returnIndex]]);\n  }\n  return $([this[index]]);\n}\nfunction append(...els) {\n  let newChild;\n  const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n  for (let k = 0; k < els.length; k += 1) {\n    newChild = els[k];\n    for (let i = 0; i < this.length; i += 1) {\n      if (typeof newChild === 'string') {\n        const tempDiv = document.createElement('div');\n        tempDiv.innerHTML = newChild;\n        while (tempDiv.firstChild) {\n          this[i].appendChild(tempDiv.firstChild);\n        }\n      } else if (newChild instanceof Dom7) {\n        for (let j = 0; j < newChild.length; j += 1) {\n          this[i].appendChild(newChild[j]);\n        }\n      } else {\n        this[i].appendChild(newChild);\n      }\n    }\n  }\n  return this;\n}\nfunction appendTo(parent) {\n  $(parent).append(this);\n  return this;\n}\nfunction prepend(newChild) {\n  const document = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getDocument)();\n  let i;\n  let j;\n  for (i = 0; i < this.length; i += 1) {\n    if (typeof newChild === 'string') {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newChild;\n      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {\n        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n      }\n    } else if (newChild instanceof Dom7) {\n      for (j = 0; j < newChild.length; j += 1) {\n        this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n      }\n    } else {\n      this[i].insertBefore(newChild, this[i].childNodes[0]);\n    }\n  }\n  return this;\n}\nfunction prependTo(parent) {\n  $(parent).prepend(this);\n  return this;\n}\nfunction insertBefore(selector) {\n  const before = $(selector);\n  for (let i = 0; i < this.length; i += 1) {\n    if (before.length === 1) {\n      before[0].parentNode.insertBefore(this[i], before[0]);\n    } else if (before.length > 1) {\n      for (let j = 0; j < before.length; j += 1) {\n        before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n      }\n    }\n  }\n}\nfunction insertAfter(selector) {\n  const after = $(selector);\n  for (let i = 0; i < this.length; i += 1) {\n    if (after.length === 1) {\n      after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n    } else if (after.length > 1) {\n      for (let j = 0; j < after.length; j += 1) {\n        after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n      }\n    }\n  }\n}\nfunction next(selector) {\n  if (this.length > 0) {\n    if (selector) {\n      if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {\n        return $([this[0].nextElementSibling]);\n      }\n      return $([]);\n    }\n    if (this[0].nextElementSibling) return $([this[0].nextElementSibling]);\n    return $([]);\n  }\n  return $([]);\n}\nfunction nextAll(selector) {\n  const nextEls = [];\n  let el = this[0];\n  if (!el) return $([]);\n  while (el.nextElementSibling) {\n    const next = el.nextElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(next).is(selector)) nextEls.push(next);\n    } else nextEls.push(next);\n    el = next;\n  }\n  return $(nextEls);\n}\nfunction prev(selector) {\n  if (this.length > 0) {\n    const el = this[0];\n    if (selector) {\n      if (el.previousElementSibling && $(el.previousElementSibling).is(selector)) {\n        return $([el.previousElementSibling]);\n      }\n      return $([]);\n    }\n    if (el.previousElementSibling) return $([el.previousElementSibling]);\n    return $([]);\n  }\n  return $([]);\n}\nfunction prevAll(selector) {\n  const prevEls = [];\n  let el = this[0];\n  if (!el) return $([]);\n  while (el.previousElementSibling) {\n    const prev = el.previousElementSibling; // eslint-disable-line\n\n    if (selector) {\n      if ($(prev).is(selector)) prevEls.push(prev);\n    } else prevEls.push(prev);\n    el = prev;\n  }\n  return $(prevEls);\n}\nfunction siblings(selector) {\n  return this.nextAll(selector).add(this.prevAll(selector));\n}\nfunction parent(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode !== null) {\n      if (selector) {\n        if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n      } else {\n        parents.push(this[i].parentNode);\n      }\n    }\n  }\n  return $(parents);\n}\nfunction parents(selector) {\n  const parents = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    let parent = this[i].parentNode; // eslint-disable-line\n\n    while (parent) {\n      if (selector) {\n        if ($(parent).is(selector)) parents.push(parent);\n      } else {\n        parents.push(parent);\n      }\n      parent = parent.parentNode;\n    }\n  }\n  return $(parents);\n}\nfunction closest(selector) {\n  let closest = this; // eslint-disable-line\n\n  if (typeof selector === 'undefined') {\n    return $([]);\n  }\n  if (!closest.is(selector)) {\n    closest = closest.parents(selector).eq(0);\n  }\n  return closest;\n}\nfunction find(selector) {\n  const foundElements = [];\n  for (let i = 0; i < this.length; i += 1) {\n    const found = this[i].querySelectorAll(selector);\n    for (let j = 0; j < found.length; j += 1) {\n      foundElements.push(found[j]);\n    }\n  }\n  return $(foundElements);\n}\nfunction children(selector) {\n  const children = []; // eslint-disable-line\n\n  for (let i = 0; i < this.length; i += 1) {\n    const childNodes = this[i].children;\n    for (let j = 0; j < childNodes.length; j += 1) {\n      if (!selector || $(childNodes[j]).is(selector)) {\n        children.push(childNodes[j]);\n      }\n    }\n  }\n  return $(children);\n}\nfunction remove() {\n  for (let i = 0; i < this.length; i += 1) {\n    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n  }\n  return this;\n}\nfunction detach() {\n  return this.remove();\n}\nfunction add(...els) {\n  const dom = this;\n  let i;\n  let j;\n  for (i = 0; i < els.length; i += 1) {\n    const toAdd = $(els[i]);\n    for (j = 0; j < toAdd.length; j += 1) {\n      dom.push(toAdd[j]);\n    }\n  }\n  return dom;\n}\nfunction empty() {\n  for (let i = 0; i < this.length; i += 1) {\n    const el = this[i];\n    if (el.nodeType === 1) {\n      for (let j = 0; j < el.childNodes.length; j += 1) {\n        if (el.childNodes[j].parentNode) {\n          el.childNodes[j].parentNode.removeChild(el.childNodes[j]);\n        }\n      }\n      el.textContent = '';\n    }\n  }\n  return this;\n}\n\n// eslint-disable-next-line\n\nfunction scrollTo(...args) {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  let [left, top, duration, easing, callback] = args;\n  if (args.length === 4 && typeof easing === 'function') {\n    callback = easing;\n    [left, top, duration, callback, easing] = args;\n  }\n  if (typeof easing === 'undefined') easing = 'swing';\n  return this.each(function animate() {\n    const el = this;\n    let currentTop;\n    let currentLeft;\n    let maxTop;\n    let maxLeft;\n    let newTop;\n    let newLeft;\n    let scrollTop; // eslint-disable-line\n\n    let scrollLeft; // eslint-disable-line\n\n    let animateTop = top > 0 || top === 0;\n    let animateLeft = left > 0 || left === 0;\n    if (typeof easing === 'undefined') {\n      easing = 'swing';\n    }\n    if (animateTop) {\n      currentTop = el.scrollTop;\n      if (!duration) {\n        el.scrollTop = top;\n      }\n    }\n    if (animateLeft) {\n      currentLeft = el.scrollLeft;\n      if (!duration) {\n        el.scrollLeft = left;\n      }\n    }\n    if (!duration) return;\n    if (animateTop) {\n      maxTop = el.scrollHeight - el.offsetHeight;\n      newTop = Math.max(Math.min(top, maxTop), 0);\n    }\n    if (animateLeft) {\n      maxLeft = el.scrollWidth - el.offsetWidth;\n      newLeft = Math.max(Math.min(left, maxLeft), 0);\n    }\n    let startTime = null;\n    if (animateTop && newTop === currentTop) animateTop = false;\n    if (animateLeft && newLeft === currentLeft) animateLeft = false;\n    function render(time = new Date().getTime()) {\n      if (startTime === null) {\n        startTime = time;\n      }\n      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n      const easeProgress = easing === 'linear' ? progress : 0.5 - Math.cos(progress * Math.PI) / 2;\n      let done;\n      if (animateTop) scrollTop = currentTop + easeProgress * (newTop - currentTop);\n      if (animateLeft) scrollLeft = currentLeft + easeProgress * (newLeft - currentLeft);\n      if (animateTop && newTop > currentTop && scrollTop >= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n      if (animateTop && newTop < currentTop && scrollTop <= newTop) {\n        el.scrollTop = newTop;\n        done = true;\n      }\n      if (animateLeft && newLeft > currentLeft && scrollLeft >= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n      if (animateLeft && newLeft < currentLeft && scrollLeft <= newLeft) {\n        el.scrollLeft = newLeft;\n        done = true;\n      }\n      if (done) {\n        if (callback) callback();\n        return;\n      }\n      if (animateTop) el.scrollTop = scrollTop;\n      if (animateLeft) el.scrollLeft = scrollLeft;\n      window.requestAnimationFrame(render);\n    }\n    window.requestAnimationFrame(render);\n  });\n} // scrollTop(top, duration, easing, callback) {\n\nfunction scrollTop(...args) {\n  let [top, duration, easing, callback] = args;\n  if (args.length === 3 && typeof easing === 'function') {\n    [top, duration, callback, easing] = args;\n  }\n  const dom = this;\n  if (typeof top === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollTop;\n    return null;\n  }\n  return dom.scrollTo(undefined, top, duration, easing, callback);\n}\nfunction scrollLeft(...args) {\n  let [left, duration, easing, callback] = args;\n  if (args.length === 3 && typeof easing === 'function') {\n    [left, duration, callback, easing] = args;\n  }\n  const dom = this;\n  if (typeof left === 'undefined') {\n    if (dom.length > 0) return dom[0].scrollLeft;\n    return null;\n  }\n  return dom.scrollTo(left, undefined, duration, easing, callback);\n}\n\n// eslint-disable-next-line\n\nfunction animate(initialProps, initialParams) {\n  const window = (0,ssr_window__WEBPACK_IMPORTED_MODULE_0__.getWindow)();\n  const els = this;\n  const a = {\n    props: Object.assign({}, initialProps),\n    params: Object.assign({\n      duration: 300,\n      easing: 'swing' // or 'linear'\n\n      /* Callbacks\n      begin(elements)\n      complete(elements)\n      progress(elements, complete, remaining, start, tweenValue)\n      */\n    }, initialParams),\n    elements: els,\n    animating: false,\n    que: [],\n    easingProgress(easing, progress) {\n      if (easing === 'swing') {\n        return 0.5 - Math.cos(progress * Math.PI) / 2;\n      }\n      if (typeof easing === 'function') {\n        return easing(progress);\n      }\n      return progress;\n    },\n    stop() {\n      if (a.frameId) {\n        window.cancelAnimationFrame(a.frameId);\n      }\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      a.que = [];\n    },\n    done(complete) {\n      a.animating = false;\n      a.elements.each(el => {\n        const element = el;\n        delete element.dom7AnimateInstance;\n      });\n      if (complete) complete(els);\n      if (a.que.length > 0) {\n        const que = a.que.shift();\n        a.animate(que[0], que[1]);\n      }\n    },\n    animate(props, params) {\n      if (a.animating) {\n        a.que.push([props, params]);\n        return a;\n      }\n      const elements = []; // Define & Cache Initials & Units\n\n      a.elements.each((el, index) => {\n        let initialFullValue;\n        let initialValue;\n        let unit;\n        let finalValue;\n        let finalFullValue;\n        if (!el.dom7AnimateInstance) a.elements[index].dom7AnimateInstance = a;\n        elements[index] = {\n          container: el\n        };\n        Object.keys(props).forEach(prop => {\n          initialFullValue = window.getComputedStyle(el, null).getPropertyValue(prop).replace(',', '.');\n          initialValue = parseFloat(initialFullValue);\n          unit = initialFullValue.replace(initialValue, '');\n          finalValue = parseFloat(props[prop]);\n          finalFullValue = props[prop] + unit;\n          elements[index][prop] = {\n            initialFullValue,\n            initialValue,\n            unit,\n            finalValue,\n            finalFullValue,\n            currentValue: initialValue\n          };\n        });\n      });\n      let startTime = null;\n      let time;\n      let elementsDone = 0;\n      let propsDone = 0;\n      let done;\n      let began = false;\n      a.animating = true;\n      function render() {\n        time = new Date().getTime();\n        let progress;\n        let easeProgress; // let el;\n\n        if (!began) {\n          began = true;\n          if (params.begin) params.begin(els);\n        }\n        if (startTime === null) {\n          startTime = time;\n        }\n        if (params.progress) {\n          // eslint-disable-next-line\n          params.progress(els, Math.max(Math.min((time - startTime) / params.duration, 1), 0), startTime + params.duration - time < 0 ? 0 : startTime + params.duration - time, startTime);\n        }\n        elements.forEach(element => {\n          const el = element;\n          if (done || el.done) return;\n          Object.keys(props).forEach(prop => {\n            if (done || el.done) return;\n            progress = Math.max(Math.min((time - startTime) / params.duration, 1), 0);\n            easeProgress = a.easingProgress(params.easing, progress);\n            const {\n              initialValue,\n              finalValue,\n              unit\n            } = el[prop];\n            el[prop].currentValue = initialValue + easeProgress * (finalValue - initialValue);\n            const currentValue = el[prop].currentValue;\n            if (finalValue > initialValue && currentValue >= finalValue || finalValue < initialValue && currentValue <= finalValue) {\n              el.container.style[prop] = finalValue + unit;\n              propsDone += 1;\n              if (propsDone === Object.keys(props).length) {\n                el.done = true;\n                elementsDone += 1;\n              }\n              if (elementsDone === elements.length) {\n                done = true;\n              }\n            }\n            if (done) {\n              a.done(params.complete);\n              return;\n            }\n            el.container.style[prop] = currentValue + unit;\n          });\n        });\n        if (done) return; // Then call\n\n        a.frameId = window.requestAnimationFrame(render);\n      }\n      a.frameId = window.requestAnimationFrame(render);\n      return a;\n    }\n  };\n  if (a.elements.length === 0) {\n    return els;\n  }\n  let animateInstance;\n  for (let i = 0; i < a.elements.length; i += 1) {\n    if (a.elements[i].dom7AnimateInstance) {\n      animateInstance = a.elements[i].dom7AnimateInstance;\n    } else a.elements[i].dom7AnimateInstance = a;\n  }\n  if (!animateInstance) {\n    animateInstance = a;\n  }\n  if (initialProps === 'stop') {\n    animateInstance.stop();\n  } else {\n    animateInstance.animate(a.props, a.params);\n  }\n  return els;\n}\nfunction stop() {\n  const els = this;\n  for (let i = 0; i < els.length; i += 1) {\n    if (els[i].dom7AnimateInstance) {\n      els[i].dom7AnimateInstance.stop();\n    }\n  }\n}\nconst noTrigger = 'resize scroll'.split(' ');\nfunction shortcut(name) {\n  function eventHandler(...args) {\n    if (typeof args[0] === 'undefined') {\n      for (let i = 0; i < this.length; i += 1) {\n        if (noTrigger.indexOf(name) < 0) {\n          if (name in this[i]) this[i][name]();else {\n            $(this[i]).trigger(name);\n          }\n        }\n      }\n      return this;\n    }\n    return this.on(name, ...args);\n  }\n  return eventHandler;\n}\nconst click = shortcut('click');\nconst blur = shortcut('blur');\nconst focus = shortcut('focus');\nconst focusin = shortcut('focusin');\nconst focusout = shortcut('focusout');\nconst keyup = shortcut('keyup');\nconst keydown = shortcut('keydown');\nconst keypress = shortcut('keypress');\nconst submit = shortcut('submit');\nconst change = shortcut('change');\nconst mousedown = shortcut('mousedown');\nconst mousemove = shortcut('mousemove');\nconst mouseup = shortcut('mouseup');\nconst mouseenter = shortcut('mouseenter');\nconst mouseleave = shortcut('mouseleave');\nconst mouseout = shortcut('mouseout');\nconst mouseover = shortcut('mouseover');\nconst touchstart = shortcut('touchstart');\nconst touchend = shortcut('touchend');\nconst touchmove = shortcut('touchmove');\nconst resize = shortcut('resize');\nconst scroll = shortcut('scroll');\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ($);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZG9tNy9kb203LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EOztBQUVwRDtBQUNBLFNBQVNFLFlBQVlBLENBQUNDLEdBQUcsRUFBRTtFQUN6QixNQUFNQyxLQUFLLEdBQUdELEdBQUcsQ0FBQ0UsU0FBUztFQUMzQkMsTUFBTSxDQUFDQyxjQUFjLENBQUNKLEdBQUcsRUFBRSxXQUFXLEVBQUU7SUFDdENLLEdBQUdBLENBQUEsRUFBRztNQUNKLE9BQU9KLEtBQUs7SUFDZCxDQUFDO0lBRURLLEdBQUdBLENBQUNDLEtBQUssRUFBRTtNQUNUTixLQUFLLENBQUNDLFNBQVMsR0FBR0ssS0FBSztJQUN6QjtFQUVGLENBQUMsQ0FBQztBQUNKO0FBRUEsTUFBTUMsSUFBSSxTQUFTQyxLQUFLLENBQUM7RUFDdkJDLFdBQVdBLENBQUNDLEtBQUssRUFBRTtJQUNqQixJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7TUFDN0IsS0FBSyxDQUFDQSxLQUFLLENBQUM7SUFDZCxDQUFDLE1BQU07TUFDTCxLQUFLLENBQUMsSUFBSUEsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO01BQ3ZCWixZQUFZLENBQUMsSUFBSSxDQUFDO0lBQ3BCO0VBQ0Y7QUFFRjtBQUVBLFNBQVNhLFNBQVNBLENBQUNDLEdBQUcsR0FBRyxFQUFFLEVBQUU7RUFDM0IsTUFBTUMsR0FBRyxHQUFHLEVBQUU7RUFDZEQsR0FBRyxDQUFDRSxPQUFPLENBQUNDLEVBQUUsSUFBSTtJQUNoQixJQUFJUCxLQUFLLENBQUNRLE9BQU8sQ0FBQ0QsRUFBRSxDQUFDLEVBQUU7TUFDckJGLEdBQUcsQ0FBQ0ksSUFBSSxDQUFD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QUFVLENBQUM7QUFDckMsTUFBTU8sS0FBSyxHQUFHUCxRQUFRLENBQUMsT0FBTyxDQUFDO0FBQy9CLE1BQU1RLE9BQU8sR0FBR1IsUUFBUSxDQUFDLFNBQVMsQ0FBQztBQUNuQyxNQUFNUyxRQUFRLEdBQUdULFFBQVEsQ0FBQyxVQUFVLENBQUM7QUFDckMsTUFBTVUsTUFBTSxHQUFHVixRQUFRLENBQUMsUUFBUSxDQUFDO0FBQ2pDLE1BQU1XLE1BQU0sR0FBR1gsUUFBUSxDQUFDLFFBQVEsQ0FBQztBQUNqQyxNQUFNWSxTQUFTLEdBQUdaLFFBQVEsQ0FBQyxXQUFXLENBQUM7QUFDdkMsTUFBTWEsU0FBUyxHQUFHYixRQUFRLENBQUMsV0FBVyxDQUFDO0FBQ3ZDLE1BQU1jLE9BQU8sR0FBR2QsUUFBUSxDQUFDLFNBQVMsQ0FBQztBQUNuQyxNQUFNZSxVQUFVLEdBQUdmLFFBQVEsQ0FBQyxZQUFZLENBQUM7QUFDekMsTUFBTWdCLFVBQVUsR0FBR2hCLFFBQVEsQ0FBQyxZQUFZLENBQUM7QUFDekMsTUFBTWlCLFFBQVEsR0FBR2pCLFFBQVEsQ0FBQyxVQUFVLENBQUM7QUFDckMsTUFBTWtCLFNBQVMsR0FBR2xCLFFBQVEsQ0FBQyxXQUFXLENBQUM7QUFDdkMsTUFBTW1CLFVBQVUsR0FBR25CLFFBQVEsQ0FBQyxZQUFZLENBQUM7QUFDekMsTUFBTW9CLFFBQVEsR0FBR3BCLFFBQVEsQ0FBQyxVQUFVLENBQUM7QUFDckMsTUFBTXFCLFNBQVMsR0FBR3JCLFFBQVEsQ0FBQyxXQUFXLENBQUM7QUFDdkMsTUFBTXNCLE1BQU0sR0FBR3RCLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDakMsTUFBTXVCLE1BQU0sR0FBR3ZCLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFFakMsaUVBQWUvTyxDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWVfbmV4dGpzXzEzLy4vbm9kZV9tb2R1bGVzL2RvbTcvZG9tNy5lc20uanM/ODgxZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERvbTcgNC4wLjZcbiAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAqIGh0dHBzOi8vZnJhbWV3b3JrNy5pby9kb2NzL2RvbTcuaHRtbFxuICpcbiAqIENvcHlyaWdodCAyMDIzLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBGZWJydWFyeSAyLCAyMDIzXG4gKi9cbmltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbmZ1bmN0aW9uIG1ha2VSZWFjdGl2ZShvYmopIHtcbiAgY29uc3QgcHJvdG8gPSBvYmouX19wcm90b19fO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnX19wcm90b19fJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBwcm90bztcbiAgICB9LFxuXG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICBwcm90by5fX3Byb3RvX18gPSB2YWx1ZTtcbiAgICB9XG5cbiAgfSk7XG59XG5cbmNsYXNzIERvbTcgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKGl0ZW1zKSB7XG4gICAgaWYgKHR5cGVvZiBpdGVtcyA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN1cGVyKGl0ZW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VwZXIoLi4uKGl0ZW1zIHx8IFtdKSk7XG4gICAgICBtYWtlUmVhY3RpdmUodGhpcyk7XG4gICAgfVxuICB9XG5cbn1cblxuZnVuY3Rpb24gYXJyYXlGbGF0KGFyciA9IFtdKSB7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBhcnIuZm9yRWFjaChlbCA9PiB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgICByZXMucHVzaCguLi5hcnJheUZsYXQoZWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnB1c2goZWwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnIsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoYXJyLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBhcnJheVVuaXF1ZShhcnIpIHtcbiAgY29uc3QgdW5pcXVlQXJyYXkgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh1bmlxdWVBcnJheS5pbmRleE9mKGFycltpXSkgPT09IC0xKSB1bmlxdWVBcnJheS5wdXNoKGFycltpXSk7XG4gIH1cblxuICByZXR1cm4gdW5pcXVlQXJyYXk7XG59XG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgKG1hdGNoLCBncm91cCkgPT4gZ3JvdXAudG9VcHBlckNhc2UoKSk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5mdW5jdGlvbiBxc2Eoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gW3NlbGVjdG9yXTtcbiAgfVxuXG4gIGNvbnN0IGEgPSBbXTtcbiAgY29uc3QgcmVzID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGEucHVzaChyZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uICQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgbGV0IGFyciA9IFtdO1xuXG4gIGlmICghY29udGV4dCAmJiBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH1cblxuICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBEb203KGFycik7XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGh0bWwgPSBzZWxlY3Rvci50cmltKCk7XG5cbiAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7XG4gICAgICBsZXQgdG9DcmVhdGUgPSAnZGl2JztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB0b0NyZWF0ZSA9ICd1bCc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dHInKSA9PT0gMCkgdG9DcmVhdGUgPSAndGJvZHknO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRkJykgPT09IDAgfHwgaHRtbC5pbmRleE9mKCc8dGgnKSA9PT0gMCkgdG9DcmVhdGUgPSAndHInO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHRvQ3JlYXRlID0gJ3RhYmxlJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzxvcHRpb24nKSA9PT0gMCkgdG9DcmVhdGUgPSAnc2VsZWN0JztcbiAgICAgIGNvbnN0IHRlbXBQYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRvQ3JlYXRlKTtcbiAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2godGVtcFBhcmVudC5jaGlsZE5vZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXJyID0gcXNhKHNlbGVjdG9yLnRyaW0oKSwgY29udGV4dCB8fCBkb2N1bWVudCk7XG4gICAgfSAvLyBhcnIgPSBxc2Eoc2VsZWN0b3IsIGRvY3VtZW50KTtcblxuICB9IGVsc2UgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yID09PSB3aW5kb3cgfHwgc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgYXJyLnB1c2goc2VsZWN0b3IpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0b3IpKSB7XG4gICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykgcmV0dXJuIHNlbGVjdG9yO1xuICAgIGFyciA9IHNlbGVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEb203KGFycmF5VW5pcXVlKGFycikpO1xufVxuXG4kLmZuID0gRG9tNy5wcm90b3R5cGU7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5mdW5jdGlvbiBhZGRDbGFzcyguLi5jbGFzc2VzKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoYyA9PiBjLnNwbGl0KCcgJykpKTtcbiAgdGhpcy5mb3JFYWNoKGVsID0+IHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZXMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKC4uLmNsYXNzZXMpIHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChjID0+IGMuc3BsaXQoJyAnKSkpO1xuICB0aGlzLmZvckVhY2goZWwgPT4ge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQ2xhc3MoLi4uY2xhc3Nlcykge1xuICBjb25zdCBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGMgPT4gYy5zcGxpdCgnICcpKSk7XG4gIHRoaXMuZm9yRWFjaChlbCA9PiB7XG4gICAgY2xhc3NOYW1lcy5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzcyguLi5jbGFzc2VzKSB7XG4gIGNvbnN0IGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoYyA9PiBjLnNwbGl0KCcgJykpKTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKHRoaXMsIGVsID0+IHtcbiAgICByZXR1cm4gY2xhc3NOYW1lcy5maWx0ZXIoY2xhc3NOYW1lID0+IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKS5sZW5ndGggPiAwO1xuICB9KS5sZW5ndGggPiAwO1xufVxuXG5mdW5jdGlvbiBhdHRyKGF0dHJzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IGF0dHJcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF0uZ2V0QXR0cmlidXRlKGF0dHJzKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCBhdHRyc1xuXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIC8vIFN0cmluZ1xuICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0cnMsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0XG4gICAgICBmb3IgKGNvbnN0IGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgIHRoaXNbaV1bYXR0ck5hbWVdID0gYXR0cnNbYXR0ck5hbWVdO1xuICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0ucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByb3AocHJvcHMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgcHJvcFxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXVtwcm9wc107XG4gIH0gZWxzZSB7XG4gICAgLy8gU2V0IHByb3BzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgdGhpc1tpXVtwcm9wc10gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9iamVjdFxuICAgICAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXVtwcm9wTmFtZV0gPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXRhKGtleSwgdmFsdWUpIHtcbiAgbGV0IGVsO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7IC8vIEdldCB2YWx1ZVxuXG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYga2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YUtleSA9IGVsLmdldEF0dHJpYnV0ZShgZGF0YS0ke2tleX1gKTtcblxuICAgIGlmIChkYXRhS2V5KSB7XG4gICAgICByZXR1cm4gZGF0YUtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IC8vIFNldCB2YWx1ZVxuXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWwgPSB0aGlzW2ldO1xuICAgIGlmICghZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSA9IHt9O1xuICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZURhdGEoa2V5KSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSkge1xuICAgICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGFzZXQoKSB7XG4gIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgY29uc3QgZGF0YXNldCA9IHt9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgaWYgKGVsLmRhdGFzZXQpIHtcbiAgICBmb3IgKGNvbnN0IGRhdGFLZXkgaW4gZWwuZGF0YXNldCkge1xuICAgICAgZGF0YXNldFtkYXRhS2V5XSA9IGVsLmRhdGFzZXRbZGF0YUtleV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWwuYXR0cmlidXRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgYXR0ciA9IGVsLmF0dHJpYnV0ZXNbaV07XG5cbiAgICAgIGlmIChhdHRyLm5hbWUuaW5kZXhPZignZGF0YS0nKSA+PSAwKSB7XG4gICAgICAgIGRhdGFzZXRbdG9DYW1lbENhc2UoYXR0ci5uYW1lLnNwbGl0KCdkYXRhLScpWzFdKV0gPSBhdHRyLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IGluIGRhdGFzZXQpIHtcbiAgICBpZiAoZGF0YXNldFtrZXldID09PSAnZmFsc2UnKSBkYXRhc2V0W2tleV0gPSBmYWxzZTtlbHNlIGlmIChkYXRhc2V0W2tleV0gPT09ICd0cnVlJykgZGF0YXNldFtrZXldID0gdHJ1ZTtlbHNlIGlmIChwYXJzZUZsb2F0KGRhdGFzZXRba2V5XSkgPT09IGRhdGFzZXRba2V5XSAqIDEpIGRhdGFzZXRba2V5XSAqPSAxO1xuICB9XG5cbiAgcmV0dXJuIGRhdGFzZXQ7XG59XG5cbmZ1bmN0aW9uIHZhbCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGdldCB2YWx1ZVxuICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgaWYgKGVsLm11bHRpcGxlICYmIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbC5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goZWwuc2VsZWN0ZWRPcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICByZXR1cm4gZWwudmFsdWU7XG4gIH0gLy8gc2V0IHZhbHVlXG5cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgZWwubXVsdGlwbGUgJiYgZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZWwub3B0aW9ucy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBlbC5vcHRpb25zW2pdLnNlbGVjdGVkID0gdmFsdWUuaW5kZXhPZihlbC5vcHRpb25zW2pdLnZhbHVlKSA+PSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB2YWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy52YWwodmFsdWUpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgZHVyYXRpb24gIT09ICdzdHJpbmcnID8gYCR7ZHVyYXRpb259bXNgIDogZHVyYXRpb247XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb24oLi4uYXJncykge1xuICBsZXQgW2V2ZW50VHlwZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2V2ZW50VHlwZSwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUxpdmVFdmVudChlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybjtcbiAgICBjb25zdCBldmVudERhdGEgPSBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuXG4gICAgaWYgKCQodGFyZ2V0KS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KHRhcmdldCwgZXZlbnREYXRhKTtlbHNlIHtcbiAgICAgIGNvbnN0IHBhcmVudHMgPSAkKHRhcmdldCkucGFyZW50cygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcGFyZW50cy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICBpZiAoJChwYXJlbnRzW2tdKS5pcyh0YXJnZXRTZWxlY3RvcikpIGxpc3RlbmVyLmFwcGx5KHBhcmVudHNba10sIGV2ZW50RGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdIDogW107XG5cbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudERhdGEpO1xuICB9XG5cbiAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gIGxldCBqO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcblxuICAgIGlmICghdGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBldmVudHNbal07XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVycykgZWwuZG9tN0xpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdKSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBlbC5kb203TGlzdGVuZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBsaXN0ZW5lcixcbiAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVFdmVudFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXZlIGV2ZW50c1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVycykgZWwuZG9tN0xpdmVMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlTGl2ZUV2ZW50XG4gICAgICAgIH0pO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVMaXZlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvZmYoLi4uYXJncykge1xuICBsZXQgW2V2ZW50VHlwZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2V2ZW50VHlwZSwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcbiAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FwdHVyZSkgY2FwdHVyZSA9IGZhbHNlO1xuICBjb25zdCBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXNbal07XG4gICAgICBsZXQgaGFuZGxlcnM7XG5cbiAgICAgIGlmICghdGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGl2ZUxpc3RlbmVycykge1xuICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhbmRsZXJzICYmIGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGxldCBrID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgayA+PSAwOyBrIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNba107XG5cbiAgICAgICAgICBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gb25jZSguLi5hcmdzKSB7XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGxldCBbZXZlbnROYW1lLCB0YXJnZXRTZWxlY3RvciwgbGlzdGVuZXIsIGNhcHR1cmVdID0gYXJncztcblxuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBbZXZlbnROYW1lLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gb25jZUhhbmRsZXIoLi4uZXZlbnRBcmdzKSB7XG4gICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnRBcmdzKTtcbiAgICBkb20ub2ZmKGV2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcblxuICAgIGlmIChvbmNlSGFuZGxlci5kb203cHJveHkpIHtcbiAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5kb203cHJveHk7XG4gICAgfVxuICB9XG5cbiAgb25jZUhhbmRsZXIuZG9tN3Byb3h5ID0gbGlzdGVuZXI7XG4gIHJldHVybiBkb20ub24oZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyKC4uLmFyZ3MpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGV2ZW50cyA9IGFyZ3NbMF0uc3BsaXQoJyAnKTtcbiAgY29uc3QgZXZlbnREYXRhID0gYXJnc1sxXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXNbal07XG5cbiAgICAgIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudCwge1xuICAgICAgICAgIGRldGFpbDogZXZlbnREYXRhLFxuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IGFyZ3MuZmlsdGVyKChkYXRhLCBkYXRhSW5kZXgpID0+IGRhdGFJbmRleCA+IDApO1xuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBbXTtcbiAgICAgICAgZGVsZXRlIGVsLmRvbTdFdmVudERhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydChjYWxsYmFjaykge1xuICBjb25zdCBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCd0cmFuc2l0aW9uc3RhcnQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9tLm9uKCd0cmFuc2l0aW9uc3RhcnQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoY2FsbGJhY2spIHtcbiAgY29uc3QgZG9tID0gdGhpcztcblxuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZG9tLm9mZigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBkb20ub24oJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkVuZChjYWxsYmFjaykge1xuICBjb25zdCBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9tLm9uKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHdpZHRoKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCd3aWR0aCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvdXRlcldpZHRoKGluY2x1ZGVNYXJnaW5zKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGhlaWdodCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ2hlaWdodCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0ICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBjb25zdCBlbCA9IHRoaXNbMF07XG4gICAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gICAgY29uc3QgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gICAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gICAgY29uc3Qgc2Nyb2xsVG9wID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoaWRlKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2hvdygpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cblxuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgIC8vIFN0aWxsIG5vdCB2aXNpYmxlXG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc3R5bGVzKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKHRoaXNbMF0pIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTtcbiAgcmV0dXJuIHt9O1xufVxuXG5mdW5jdGlvbiBjc3MocHJvcHMsIHZhbHVlKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgaTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyAuY3NzKCd3aWR0aCcpXG4gICAgICBpZiAodGhpc1swXSkgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAuY3NzKHsgd2lkdGg6ICcxMDBweCcgfSlcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gLmNzcygnd2lkdGgnLCAnMTAwcHgnKVxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnN0eWxlW3Byb3BzXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVhY2goY2FsbGJhY2spIHtcbiAgaWYgKCFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gIHRoaXMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgY2FsbGJhY2suYXBwbHkoZWwsIFtlbCwgaW5kZXhdKTtcbiAgfSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2spIHtcbiAgY29uc3QgcmVzdWx0ID0gYXJyYXlGaWx0ZXIodGhpcywgY2FsbGJhY2spO1xuICByZXR1cm4gJChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBodG1sKGh0bWwpIHtcbiAgaWYgKHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiBudWxsO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRleHQodGV4dCkge1xuICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBlbCA9IHRoaXNbMF07XG4gIGxldCBjb21wYXJlV2l0aDtcbiAgbGV0IGk7XG4gIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGVsLm1hdGNoZXMpIHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSByZXR1cm4gZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgY29tcGFyZVdpdGggPSAkKHNlbGVjdG9yKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yID09PSBkb2N1bWVudCkge1xuICAgIHJldHVybiBlbCA9PT0gZG9jdW1lbnQ7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IHdpbmRvdykge1xuICAgIHJldHVybiBlbCA9PT0gd2luZG93O1xuICB9XG5cbiAgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgIGNvbXBhcmVXaXRoID0gc2VsZWN0b3Iubm9kZVR5cGUgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3I7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChjb21wYXJlV2l0aFtpXSA9PT0gZWwpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaW5kZXgoKSB7XG4gIGxldCBjaGlsZCA9IHRoaXNbMF07XG4gIGxldCBpO1xuXG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gaTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcztcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBjb25zdCByZXR1cm5JbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGlmIChyZXR1cm5JbmRleCA8IDApIHJldHVybiAkKFtdKTtcbiAgICByZXR1cm4gJChbdGhpc1tyZXR1cm5JbmRleF1dKTtcbiAgfVxuXG4gIHJldHVybiAkKFt0aGlzW2luZGV4XV0pO1xufVxuXG5mdW5jdGlvbiBhcHBlbmQoLi4uZWxzKSB7XG4gIGxldCBuZXdDaGlsZDtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gIGZvciAobGV0IGsgPSAwOyBrIDwgZWxzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgbmV3Q2hpbGQgPSBlbHNba107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRUbyhwYXJlbnQpIHtcbiAgJChwYXJlbnQpLmFwcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmQobmV3Q2hpbGQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBsZXQgaTtcbiAgbGV0IGo7XG5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgZm9yIChqID0gdGVtcERpdi5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgaiAtPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZCwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcHJlcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkucHJlcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShzZWxlY3Rvcikge1xuICBjb25zdCBiZWZvcmUgPSAkKHNlbGVjdG9yKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYmVmb3JlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYmVmb3JlWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGJlZm9yZVswXSk7XG4gICAgfSBlbHNlIGlmIChiZWZvcmUubGVuZ3RoID4gMSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBiZWZvcmUubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYmVmb3JlW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBiZWZvcmVbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRBZnRlcihzZWxlY3Rvcikge1xuICBjb25zdCBhZnRlciA9ICQoc2VsZWN0b3IpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhZnRlci5sZW5ndGggPT09IDEpIHtcbiAgICAgIGFmdGVyWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGFmdGVyWzBdLm5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2UgaWYgKGFmdGVyLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWZ0ZXIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYWZ0ZXJbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGFmdGVyW2pdLm5leHRTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dChzZWxlY3Rvcikge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcgJiYgJCh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiAkKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChbXSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKSByZXR1cm4gJChbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICByZXR1cm4gJChbXSk7XG59XG5cbmZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICBsZXQgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKCQobmV4dCkuaXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgfSBlbHNlIG5leHRFbHMucHVzaChuZXh0KTtcblxuICAgIGVsID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiAkKG5leHRFbHMpO1xufVxuXG5mdW5jdGlvbiBwcmV2KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbMF07XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICQoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykgcmV0dXJuICQoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICByZXR1cm4gJChbXSk7XG59XG5cbmZ1bmN0aW9uIHByZXZBbGwoc2VsZWN0b3IpIHtcbiAgY29uc3QgcHJldkVscyA9IFtdO1xuICBsZXQgZWwgPSB0aGlzWzBdO1xuICBpZiAoIWVsKSByZXR1cm4gJChbXSk7XG5cbiAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoJChwcmV2KS5pcyhzZWxlY3RvcikpIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICB9IGVsc2UgcHJldkVscy5wdXNoKHByZXYpO1xuXG4gICAgZWwgPSBwcmV2O1xuICB9XG5cbiAgcmV0dXJuICQocHJldkVscyk7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzLm5leHRBbGwoc2VsZWN0b3IpLmFkZCh0aGlzLnByZXZBbGwoc2VsZWN0b3IpKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJCh0aGlzW2ldLnBhcmVudE5vZGUpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChwYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgcGFyZW50ID0gdGhpc1tpXS5wYXJlbnROb2RlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQocGFyZW50KS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKHBhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG4gIGxldCBjbG9zZXN0ID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgaWYgKCFjbG9zZXN0LmlzKHNlbGVjdG9yKSkge1xuICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApO1xuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3Q7XG59XG5cbmZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgY29uc3QgZm91bmRFbGVtZW50cyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgZm91bmQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGZvdW5kRWxlbWVudHMucHVzaChmb3VuZFtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQoZm91bmRFbGVtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gIGNvbnN0IGNoaWxkcmVuID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZHJlbjtcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgaWYgKCFzZWxlY3RvciB8fCAkKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKGNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlKSB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGV0YWNoKCkge1xuICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gYWRkKC4uLmVscykge1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBsZXQgaTtcbiAgbGV0IGo7XG5cbiAgZm9yIChpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHRvQWRkID0gJChlbHNbaV0pO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IHRvQWRkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBkb20ucHVzaCh0b0FkZFtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvbTtcbn1cblxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBlbC5jaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlbC5jaGlsZE5vZGVzW2pdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwuY2hpbGROb2Rlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWwudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbmZ1bmN0aW9uIHNjcm9sbFRvKC4uLmFyZ3MpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBbbGVmdCwgdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBlYXNpbmc7XG4gICAgW2xlZnQsIHRvcCwgZHVyYXRpb24sIGNhbGxiYWNrLCBlYXNpbmddID0gYXJncztcbiAgfVxuXG4gIGlmICh0eXBlb2YgZWFzaW5nID09PSAndW5kZWZpbmVkJykgZWFzaW5nID0gJ3N3aW5nJztcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIGNvbnN0IGVsID0gdGhpcztcbiAgICBsZXQgY3VycmVudFRvcDtcbiAgICBsZXQgY3VycmVudExlZnQ7XG4gICAgbGV0IG1heFRvcDtcbiAgICBsZXQgbWF4TGVmdDtcbiAgICBsZXQgbmV3VG9wO1xuICAgIGxldCBuZXdMZWZ0O1xuICAgIGxldCBzY3JvbGxUb3A7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGxldCBzY3JvbGxMZWZ0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBsZXQgYW5pbWF0ZVRvcCA9IHRvcCA+IDAgfHwgdG9wID09PSAwO1xuICAgIGxldCBhbmltYXRlTGVmdCA9IGxlZnQgPiAwIHx8IGxlZnQgPT09IDA7XG5cbiAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVhc2luZyA9ICdzd2luZyc7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIGN1cnJlbnRUb3AgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgY3VycmVudExlZnQgPSBlbC5zY3JvbGxMZWZ0O1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZHVyYXRpb24pIHJldHVybjtcblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBtYXhUb3AgPSBlbC5zY3JvbGxIZWlnaHQgLSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdUb3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIG1heFRvcCksIDApO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgbWF4TGVmdCA9IGVsLnNjcm9sbFdpZHRoIC0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICBuZXdMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgbWF4TGVmdCksIDApO1xuICAgIH1cblxuICAgIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA9PT0gY3VycmVudFRvcCkgYW5pbWF0ZVRvcCA9IGZhbHNlO1xuICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID09PSBjdXJyZW50TGVmdCkgYW5pbWF0ZUxlZnQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlcih0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkpIHtcbiAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgICAgY29uc3QgZWFzZVByb2dyZXNzID0gZWFzaW5nID09PSAnbGluZWFyJyA/IHByb2dyZXNzIDogMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgICBsZXQgZG9uZTtcbiAgICAgIGlmIChhbmltYXRlVG9wKSBzY3JvbGxUb3AgPSBjdXJyZW50VG9wICsgZWFzZVByb2dyZXNzICogKG5ld1RvcCAtIGN1cnJlbnRUb3ApO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBzY3JvbGxMZWZ0ID0gY3VycmVudExlZnQgKyBlYXNlUHJvZ3Jlc3MgKiAobmV3TGVmdCAtIGN1cnJlbnRMZWZ0KTtcblxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID4gY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPj0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA8IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wIDw9IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA+IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPj0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0IDwgY3VycmVudExlZnQgJiYgc2Nyb2xsTGVmdCA8PSBuZXdMZWZ0KSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBuZXdMZWZ0O1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRlVG9wKSBlbC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQpIGVsLnNjcm9sbExlZnQgPSBzY3JvbGxMZWZ0O1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgIH1cblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgfSk7XG59IC8vIHNjcm9sbFRvcCh0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKSB7XG5cblxuZnVuY3Rpb24gc2Nyb2xsVG9wKC4uLmFyZ3MpIHtcbiAgbGV0IFt0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrXSA9IGFyZ3M7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAzICYmIHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBbdG9wLCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICB9XG5cbiAgY29uc3QgZG9tID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsVG9wO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyh1bmRlZmluZWQsIHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxMZWZ0KC4uLmFyZ3MpIHtcbiAgbGV0IFtsZWZ0LCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgW2xlZnQsIGR1cmF0aW9uLCBjYWxsYmFjaywgZWFzaW5nXSA9IGFyZ3M7XG4gIH1cblxuICBjb25zdCBkb20gPSB0aGlzO1xuXG4gIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBkb20uc2Nyb2xsVG8obGVmdCwgdW5kZWZpbmVkLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5mdW5jdGlvbiBhbmltYXRlKGluaXRpYWxQcm9wcywgaW5pdGlhbFBhcmFtcykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZWxzID0gdGhpcztcbiAgY29uc3QgYSA9IHtcbiAgICBwcm9wczogT2JqZWN0LmFzc2lnbih7fSwgaW5pdGlhbFByb3BzKSxcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgIGVhc2luZzogJ3N3aW5nJyAvLyBvciAnbGluZWFyJ1xuXG4gICAgICAvKiBDYWxsYmFja3NcbiAgICAgIGJlZ2luKGVsZW1lbnRzKVxuICAgICAgY29tcGxldGUoZWxlbWVudHMpXG4gICAgICBwcm9ncmVzcyhlbGVtZW50cywgY29tcGxldGUsIHJlbWFpbmluZywgc3RhcnQsIHR3ZWVuVmFsdWUpXG4gICAgICAqL1xuXG4gICAgfSwgaW5pdGlhbFBhcmFtcyksXG4gICAgZWxlbWVudHM6IGVscyxcbiAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgIHF1ZTogW10sXG5cbiAgICBlYXNpbmdQcm9ncmVzcyhlYXNpbmcsIHByb2dyZXNzKSB7XG4gICAgICBpZiAoZWFzaW5nID09PSAnc3dpbmcnKSB7XG4gICAgICAgIHJldHVybiAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGVhc2luZyhwcm9ncmVzcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9ncmVzcztcbiAgICB9LFxuXG4gICAgc3RvcCgpIHtcbiAgICAgIGlmIChhLmZyYW1lSWQpIHtcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGEuZnJhbWVJZCk7XG4gICAgICB9XG5cbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZWwgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGEucXVlID0gW107XG4gICAgfSxcblxuICAgIGRvbmUoY29tcGxldGUpIHtcbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goZWwgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChjb21wbGV0ZSkgY29tcGxldGUoZWxzKTtcblxuICAgICAgaWYgKGEucXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcXVlID0gYS5xdWUuc2hpZnQoKTtcbiAgICAgICAgYS5hbmltYXRlKHF1ZVswXSwgcXVlWzFdKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYW5pbWF0ZShwcm9wcywgcGFyYW1zKSB7XG4gICAgICBpZiAoYS5hbmltYXRpbmcpIHtcbiAgICAgICAgYS5xdWUucHVzaChbcHJvcHMsIHBhcmFtc10pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTsgLy8gRGVmaW5lICYgQ2FjaGUgSW5pdGlhbHMgJiBVbml0c1xuXG4gICAgICBhLmVsZW1lbnRzLmVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgICBsZXQgaW5pdGlhbEZ1bGxWYWx1ZTtcbiAgICAgICAgbGV0IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgbGV0IHVuaXQ7XG4gICAgICAgIGxldCBmaW5hbFZhbHVlO1xuICAgICAgICBsZXQgZmluYWxGdWxsVmFsdWU7XG4gICAgICAgIGlmICghZWwuZG9tN0FuaW1hdGVJbnN0YW5jZSkgYS5lbGVtZW50c1tpbmRleF0uZG9tN0FuaW1hdGVJbnN0YW5jZSA9IGE7XG4gICAgICAgIGVsZW1lbnRzW2luZGV4XSA9IHtcbiAgICAgICAgICBjb250YWluZXI6IGVsXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgICAgICBpbml0aWFsVmFsdWUgPSBwYXJzZUZsb2F0KGluaXRpYWxGdWxsVmFsdWUpO1xuICAgICAgICAgIHVuaXQgPSBpbml0aWFsRnVsbFZhbHVlLnJlcGxhY2UoaW5pdGlhbFZhbHVlLCAnJyk7XG4gICAgICAgICAgZmluYWxWYWx1ZSA9IHBhcnNlRmxvYXQocHJvcHNbcHJvcF0pO1xuICAgICAgICAgIGZpbmFsRnVsbFZhbHVlID0gcHJvcHNbcHJvcF0gKyB1bml0O1xuICAgICAgICAgIGVsZW1lbnRzW2luZGV4XVtwcm9wXSA9IHtcbiAgICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICB1bml0LFxuICAgICAgICAgICAgZmluYWxWYWx1ZSxcbiAgICAgICAgICAgIGZpbmFsRnVsbFZhbHVlLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlOiBpbml0aWFsVmFsdWVcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gICAgICBsZXQgdGltZTtcbiAgICAgIGxldCBlbGVtZW50c0RvbmUgPSAwO1xuICAgICAgbGV0IHByb3BzRG9uZSA9IDA7XG4gICAgICBsZXQgZG9uZTtcbiAgICAgIGxldCBiZWdhbiA9IGZhbHNlO1xuICAgICAgYS5hbmltYXRpbmcgPSB0cnVlO1xuXG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgbGV0IHByb2dyZXNzO1xuICAgICAgICBsZXQgZWFzZVByb2dyZXNzOyAvLyBsZXQgZWw7XG5cbiAgICAgICAgaWYgKCFiZWdhbikge1xuICAgICAgICAgIGJlZ2FuID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocGFyYW1zLmJlZ2luKSBwYXJhbXMuYmVnaW4oZWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzcykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIHBhcmFtcy5wcm9ncmVzcyhlbHMsIE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIHBhcmFtcy5kdXJhdGlvbiwgMSksIDApLCBzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24gLSB0aW1lIDwgMCA/IDAgOiBzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24gLSB0aW1lLCBzdGFydFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICBjb25zdCBlbCA9IGVsZW1lbnQ7XG4gICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgICAgICAgIGVhc2VQcm9ncmVzcyA9IGEuZWFzaW5nUHJvZ3Jlc3MocGFyYW1zLmVhc2luZywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICAgIGZpbmFsVmFsdWUsXG4gICAgICAgICAgICAgIHVuaXRcbiAgICAgICAgICAgIH0gPSBlbFtwcm9wXTtcbiAgICAgICAgICAgIGVsW3Byb3BdLmN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZSArIGVhc2VQcm9ncmVzcyAqIChmaW5hbFZhbHVlIC0gaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGVsW3Byb3BdLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKGZpbmFsVmFsdWUgPiBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlID49IGZpbmFsVmFsdWUgfHwgZmluYWxWYWx1ZSA8IGluaXRpYWxWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPD0gZmluYWxWYWx1ZSkge1xuICAgICAgICAgICAgICBlbC5jb250YWluZXIuc3R5bGVbcHJvcF0gPSBmaW5hbFZhbHVlICsgdW5pdDtcbiAgICAgICAgICAgICAgcHJvcHNEb25lICs9IDE7XG5cbiAgICAgICAgICAgICAgaWYgKHByb3BzRG9uZSA9PT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVsLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzRG9uZSArPSAxO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzRG9uZSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgYS5kb25lKHBhcmFtcy5jb21wbGV0ZSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gY3VycmVudFZhbHVlICsgdW5pdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47IC8vIFRoZW4gY2FsbFxuXG4gICAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIH1cblxuICAgICAgYS5mcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gIH07XG5cbiAgaWYgKGEuZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVscztcbiAgfVxuXG4gIGxldCBhbmltYXRlSW5zdGFuY2U7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmVsZW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZSkge1xuICAgICAgYW5pbWF0ZUluc3RhbmNlID0gYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgIH0gZWxzZSBhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuICB9XG5cbiAgaWYgKCFhbmltYXRlSW5zdGFuY2UpIHtcbiAgICBhbmltYXRlSW5zdGFuY2UgPSBhO1xuICB9XG5cbiAgaWYgKGluaXRpYWxQcm9wcyA9PT0gJ3N0b3AnKSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlLnN0b3AoKTtcbiAgfSBlbHNlIHtcbiAgICBhbmltYXRlSW5zdGFuY2UuYW5pbWF0ZShhLnByb3BzLCBhLnBhcmFtcyk7XG4gIH1cblxuICByZXR1cm4gZWxzO1xufVxuXG5mdW5jdGlvbiBzdG9wKCkge1xuICBjb25zdCBlbHMgPSB0aGlzO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG5vVHJpZ2dlciA9ICdyZXNpemUgc2Nyb2xsJy5zcGxpdCgnICcpO1xuXG5mdW5jdGlvbiBzaG9ydGN1dChuYW1lKSB7XG4gIGZ1bmN0aW9uIGV2ZW50SGFuZGxlciguLi5hcmdzKSB7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChub1RyaWdnZXIuaW5kZXhPZihuYW1lKSA8IDApIHtcbiAgICAgICAgICBpZiAobmFtZSBpbiB0aGlzW2ldKSB0aGlzW2ldW25hbWVdKCk7ZWxzZSB7XG4gICAgICAgICAgICAkKHRoaXNbaV0pLnRyaWdnZXIobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm9uKG5hbWUsIC4uLmFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50SGFuZGxlcjtcbn1cblxuY29uc3QgY2xpY2sgPSBzaG9ydGN1dCgnY2xpY2snKTtcbmNvbnN0IGJsdXIgPSBzaG9ydGN1dCgnYmx1cicpO1xuY29uc3QgZm9jdXMgPSBzaG9ydGN1dCgnZm9jdXMnKTtcbmNvbnN0IGZvY3VzaW4gPSBzaG9ydGN1dCgnZm9jdXNpbicpO1xuY29uc3QgZm9jdXNvdXQgPSBzaG9ydGN1dCgnZm9jdXNvdXQnKTtcbmNvbnN0IGtleXVwID0gc2hvcnRjdXQoJ2tleXVwJyk7XG5jb25zdCBrZXlkb3duID0gc2hvcnRjdXQoJ2tleWRvd24nKTtcbmNvbnN0IGtleXByZXNzID0gc2hvcnRjdXQoJ2tleXByZXNzJyk7XG5jb25zdCBzdWJtaXQgPSBzaG9ydGN1dCgnc3VibWl0Jyk7XG5jb25zdCBjaGFuZ2UgPSBzaG9ydGN1dCgnY2hhbmdlJyk7XG5jb25zdCBtb3VzZWRvd24gPSBzaG9ydGN1dCgnbW91c2Vkb3duJyk7XG5jb25zdCBtb3VzZW1vdmUgPSBzaG9ydGN1dCgnbW91c2Vtb3ZlJyk7XG5jb25zdCBtb3VzZXVwID0gc2hvcnRjdXQoJ21vdXNldXAnKTtcbmNvbnN0IG1vdXNlZW50ZXIgPSBzaG9ydGN1dCgnbW91c2VlbnRlcicpO1xuY29uc3QgbW91c2VsZWF2ZSA9IHNob3J0Y3V0KCdtb3VzZWxlYXZlJyk7XG5jb25zdCBtb3VzZW91dCA9IHNob3J0Y3V0KCdtb3VzZW91dCcpO1xuY29uc3QgbW91c2VvdmVyID0gc2hvcnRjdXQoJ21vdXNlb3ZlcicpO1xuY29uc3QgdG91Y2hzdGFydCA9IHNob3J0Y3V0KCd0b3VjaHN0YXJ0Jyk7XG5jb25zdCB0b3VjaGVuZCA9IHNob3J0Y3V0KCd0b3VjaGVuZCcpO1xuY29uc3QgdG91Y2htb3ZlID0gc2hvcnRjdXQoJ3RvdWNobW92ZScpO1xuY29uc3QgcmVzaXplID0gc2hvcnRjdXQoJ3Jlc2l6ZScpO1xuY29uc3Qgc2Nyb2xsID0gc2hvcnRjdXQoJ3Njcm9sbCcpO1xuXG5leHBvcnQgZGVmYXVsdCAkO1xuZXhwb3J0IHsgJCwgYWRkLCBhZGRDbGFzcywgYW5pbWF0ZSwgYW5pbWF0aW9uRW5kLCBhcHBlbmQsIGFwcGVuZFRvLCBhdHRyLCBibHVyLCBjaGFuZ2UsIGNoaWxkcmVuLCBjbGljaywgY2xvc2VzdCwgY3NzLCBkYXRhLCBkYXRhc2V0LCBkZXRhY2gsIGVhY2gsIGVtcHR5LCBlcSwgZmlsdGVyLCBmaW5kLCBmb2N1cywgZm9jdXNpbiwgZm9jdXNvdXQsIGhhc0NsYXNzLCBoZWlnaHQsIGhpZGUsIGh0bWwsIGluZGV4LCBpbnNlcnRBZnRlciwgaW5zZXJ0QmVmb3JlLCBpcywga2V5ZG93biwga2V5cHJlc3MsIGtleXVwLCBtb3VzZWRvd24sIG1vdXNlZW50ZXIsIG1vdXNlbGVhdmUsIG1vdXNlbW92ZSwgbW91c2VvdXQsIG1vdXNlb3ZlciwgbW91c2V1cCwgbmV4dCwgbmV4dEFsbCwgb2ZmLCBvZmZzZXQsIG9uLCBvbmNlLCBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aCwgcGFyZW50LCBwYXJlbnRzLCBwcmVwZW5kLCBwcmVwZW5kVG8sIHByZXYsIHByZXZBbGwsIHByb3AsIHJlbW92ZSwgcmVtb3ZlQXR0ciwgcmVtb3ZlQ2xhc3MsIHJlbW92ZURhdGEsIHJlc2l6ZSwgc2Nyb2xsLCBzY3JvbGxMZWZ0LCBzY3JvbGxUbywgc2Nyb2xsVG9wLCBzaG93LCBzaWJsaW5ncywgc3RvcCwgc3R5bGVzLCBzdWJtaXQsIHRleHQsIHRvZ2dsZUNsYXNzLCB0b3VjaGVuZCwgdG91Y2htb3ZlLCB0b3VjaHN0YXJ0LCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIHRyYW5zaXRpb25FbmQsIHRyYW5zaXRpb25TdGFydCwgdHJpZ2dlciwgdmFsLCB2YWx1ZSwgd2lkdGggfTtcbiJdLCJuYW1lcyI6WyJnZXRXaW5kb3ciLCJnZXREb2N1bWVudCIsIm1ha2VSZWFjdGl2ZSIsIm9iaiIsInByb3RvIiwiX19wcm90b19fIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsIkRvbTciLCJBcnJheSIsImNvbnN0cnVjdG9yIiwiaXRlbXMiLCJhcnJheUZsYXQiLCJhcnIiLCJyZXMiLCJmb3JFYWNoIiwiZWwiLCJpc0FycmF5IiwicHVzaCIsImFycmF5RmlsdGVyIiwiY2FsbGJhY2siLCJwcm90b3R5cGUiLCJmaWx0ZXIiLCJjYWxsIiwiYXJyYXlVbmlxdWUiLCJ1bmlxdWVBcnJheSIsImkiLCJsZW5ndGgiLCJpbmRleE9mIiwidG9DYW1lbENhc2UiLCJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJtYXRjaCIsImdyb3VwIiwidG9VcHBlckNhc2UiLCJxc2EiLCJzZWxlY3RvciIsImNvbnRleHQiLCJhIiwicXVlcnlTZWxlY3RvckFsbCIsIiQiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImh0bWwiLCJ0cmltIiwidG9DcmVhdGUiLCJ0ZW1wUGFyZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImNoaWxkTm9kZXMiLCJub2RlVHlwZSIsImZuIiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY2xhc3NOYW1lcyIsIm1hcCIsImMiLCJzcGxpdCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZUNsYXNzIiwicmVtb3ZlIiwidG9nZ2xlQ2xhc3MiLCJjbGFzc05hbWUiLCJ0b2dnbGUiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwiYXR0ciIsImF0dHJzIiwiYXJndW1lbnRzIiwiZ2V0QXR0cmlidXRlIiwidW5kZWZpbmVkIiwic2V0QXR0cmlidXRlIiwiYXR0ck5hbWUiLCJyZW1vdmVBdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwicHJvcCIsInByb3BzIiwicHJvcE5hbWUiLCJkYXRhIiwia2V5IiwiZG9tN0VsZW1lbnREYXRhU3RvcmFnZSIsImRhdGFLZXkiLCJyZW1vdmVEYXRhIiwiZGF0YXNldCIsImF0dHJpYnV0ZXMiLCJuYW1lIiwicGFyc2VGbG9hdCIsInZhbCIsIm11bHRpcGxlIiwibm9kZU5hbWUiLCJ2YWx1ZXMiLCJzZWxlY3RlZE9wdGlvbnMiLCJqIiwib3B0aW9ucyIsInNlbGVjdGVkIiwidHJhbnNmb3JtIiwic3R5bGUiLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJvbiIsImFyZ3MiLCJldmVudFR5cGUiLCJ0YXJnZXRTZWxlY3RvciIsImxpc3RlbmVyIiwiY2FwdHVyZSIsImhhbmRsZUxpdmVFdmVudCIsImUiLCJ0YXJnZXQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwidW5zaGlmdCIsImlzIiwiYXBwbHkiLCJwYXJlbnRzIiwiayIsImhhbmRsZUV2ZW50IiwiZXZlbnRzIiwiZXZlbnQiLCJkb203TGlzdGVuZXJzIiwicHJveHlMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb203TGl2ZUxpc3RlbmVycyIsIm9mZiIsImhhbmRsZXJzIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzcGxpY2UiLCJkb203cHJveHkiLCJvbmNlIiwiZG9tIiwiZXZlbnROYW1lIiwib25jZUhhbmRsZXIiLCJldmVudEFyZ3MiLCJ0cmlnZ2VyIiwiQ3VzdG9tRXZlbnQiLCJldnQiLCJkZXRhaWwiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRhdGFJbmRleCIsImRpc3BhdGNoRXZlbnQiLCJ0cmFuc2l0aW9uU3RhcnQiLCJmaXJlQ2FsbEJhY2siLCJ0cmFuc2l0aW9uRW5kIiwiYW5pbWF0aW9uRW5kIiwid2lkdGgiLCJpbm5lcldpZHRoIiwiY3NzIiwib3V0ZXJXaWR0aCIsImluY2x1ZGVNYXJnaW5zIiwic3R5bGVzIiwib2Zmc2V0V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJvdXRlckhlaWdodCIsIm9mZnNldEhlaWdodCIsIm9mZnNldCIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJvZHkiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbExlZnQiLCJzY3JvbGxYIiwidG9wIiwibGVmdCIsImhpZGUiLCJkaXNwbGF5Iiwic2hvdyIsImdldENvbXB1dGVkU3R5bGUiLCJlYWNoIiwiaW5kZXgiLCJyZXN1bHQiLCJ0ZXh0IiwidGV4dENvbnRlbnQiLCJjb21wYXJlV2l0aCIsIm1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwiZXEiLCJyZXR1cm5JbmRleCIsImFwcGVuZCIsImVscyIsIm5ld0NoaWxkIiwidGVtcERpdiIsImZpcnN0Q2hpbGQiLCJhcHBlbmRDaGlsZCIsImFwcGVuZFRvIiwicGFyZW50IiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsInByZXBlbmRUbyIsImJlZm9yZSIsInBhcmVudE5vZGUiLCJjbG9uZU5vZGUiLCJpbnNlcnRBZnRlciIsImFmdGVyIiwibmV4dFNpYmxpbmciLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dEFsbCIsIm5leHRFbHMiLCJwcmV2IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZBbGwiLCJwcmV2RWxzIiwic2libGluZ3MiLCJjbG9zZXN0IiwiZmluZCIsImZvdW5kRWxlbWVudHMiLCJmb3VuZCIsImNoaWxkcmVuIiwicmVtb3ZlQ2hpbGQiLCJkZXRhY2giLCJ0b0FkZCIsImVtcHR5Iiwic2Nyb2xsVG8iLCJlYXNpbmciLCJhbmltYXRlIiwiY3VycmVudFRvcCIsImN1cnJlbnRMZWZ0IiwibWF4VG9wIiwibWF4TGVmdCIsIm5ld1RvcCIsIm5ld0xlZnQiLCJhbmltYXRlVG9wIiwiYW5pbWF0ZUxlZnQiLCJzY3JvbGxIZWlnaHQiLCJNYXRoIiwibWF4IiwibWluIiwic2Nyb2xsV2lkdGgiLCJzdGFydFRpbWUiLCJyZW5kZXIiLCJ0aW1lIiwiRGF0ZSIsImdldFRpbWUiLCJwcm9ncmVzcyIsImVhc2VQcm9ncmVzcyIsImNvcyIsIlBJIiwiZG9uZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImluaXRpYWxQcm9wcyIsImluaXRpYWxQYXJhbXMiLCJhc3NpZ24iLCJwYXJhbXMiLCJlbGVtZW50cyIsImFuaW1hdGluZyIsInF1ZSIsImVhc2luZ1Byb2dyZXNzIiwic3RvcCIsImZyYW1lSWQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImVsZW1lbnQiLCJkb203QW5pbWF0ZUluc3RhbmNlIiwiY29tcGxldGUiLCJzaGlmdCIsImluaXRpYWxGdWxsVmFsdWUiLCJpbml0aWFsVmFsdWUiLCJ1bml0IiwiZmluYWxWYWx1ZSIsImZpbmFsRnVsbFZhbHVlIiwiY29udGFpbmVyIiwia2V5cyIsImN1cnJlbnRWYWx1ZSIsImVsZW1lbnRzRG9uZSIsInByb3BzRG9uZSIsImJlZ2FuIiwiYmVnaW4iLCJhbmltYXRlSW5zdGFuY2UiLCJub1RyaWdnZXIiLCJzaG9ydGN1dCIsImV2ZW50SGFuZGxlciIsImNsaWNrIiwiYmx1ciIsImZvY3VzIiwiZm9jdXNpbiIsImZvY3Vzb3V0Iiwia2V5dXAiLCJrZXlkb3duIiwia2V5cHJlc3MiLCJzdWJtaXQiLCJjaGFuZ2UiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJtb3VzZW91dCIsIm1vdXNlb3ZlciIsInRvdWNoc3RhcnQiLCJ0b3VjaGVuZCIsInRvdWNobW92ZSIsInJlc2l6ZSIsInNjcm9sbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dom7/dom7.esm.js\n");

/***/ })

};
;